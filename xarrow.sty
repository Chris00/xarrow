%%% Time-stamp: <2005-09-18 09:50:43 trch>

\NeedsTeXFormat{LaTeX2e}[1996/06/01]
\ProvidesPackage{xarrow}%
  [2005/09/13 v1.0 Extensible arrows]% splitted from MathGen


\ProcessOptions


%***********************************************************************
%
%                F A C U L T A T I V E    S C R I P T S
%
%***********************************************************************

% \takescripts
% ======================================================================
% \takescripts  {<group of commands>}< | ^# | _# | ^#_# | _#^# >
%    -->   <group of commands>^{#}_{#}
% The <command> is supposed to require ^#1_#2 after it, and
% consequently doesn't have to be expanded too early!
% (As long as <command> is taken as an argument, it isn't expanded :
% other commands have to be expanded before it is.)
% !!! <command> can be a group ==> put braces when it is plug as an argument.
%     But that group of commands need ^#_# after it => not too much braces!
%
% Easier is to say that  \takescript  allows scripts to be in any
% order or inexistent, exactly as  \mathop  does.
% USE : \def\commandwithscripts{\takescript\command}
%       \def\command^#1_#2{...def of macro...}
%    => \commandwithscripts  will do exactly the same as \command
%       but scripts mustn't be in the order ^{...}_{...}
%
% [27/10/95]  Moreover,  after the command has been taken as argument,
% `^' and `_' are set to appropriate catcode so that, for example, the
% notation `^{...}' can be keeped, even if `^' is active.
% (when reading this file, it is assumed \catcode of `^' is 7 and of `_' is 8)
%
\newcommand{\takescripts}[1]{%     - #1 = <command>
  \begingroup %                     - for changes of \catcode's to remain local
  \catcode`\^=7  \catcode`\_=8 %    -
  \@ifnextchar^{%                   - take superscript and look for subscript
        \super@then@subscript{#1}}{%- look for subscript
  \@ifnextchar_{%                   - take subscript, then look for superscript
        \sub@then@superscript{#1}}{%- no super- nor subscript present
  \takescripts@passtocommand{#1}{}{}\end@takescripts}}}

  %-- \super@then@subscript <command>^<text>
  \def\super@then@subscript#1^#2{%- look for subscript
    \@ifnextchar_{\take@subscript{#1}^{#2}%  #1^{#2} _{...} is expected
      }{\takescripts@passtocommand{#1}{#2}{}\end@takescripts}}

  %-- \take@subscript<command>^<text>_#3  (necessary to put \end@takescripts)
  \def\take@subscript#1^#2_#3{%
    \takescripts@passtocommand{#1}{#2}{#3}\end@takescripts}

  %-- \sub@then@superscript <\command's>_#1
  \def\sub@then@superscript#1_#2{%
    \@ifnextchar^{\sw@psubsuperscript{#1}_{#2}% ^{...} is expected
      }{\takescripts@passtocommand{#1}{}{#2}\end@takescripts}}

  %-- \sw@psubsuperscript <command>_#2^#3  -->  <command>^#3_#2
  \def\sw@psubsuperscript#1_#2^#3{%
    \takescripts@passtocommand{#1}{#3}{#2}\end@takescripts}

  %-- utility: see Macros.4ht
  \newcommand{\takescripts@passtocommand}[3]{#1^{#2}_{#3}}

  %-- close the group so that \catcode's of `^' and `_' are restored.
  \def\end@takescripts{\endgroup}


% \putscripts
% ======================================================================
% \putscripts\command^<test sup #1>_<test sub #2>^#3_#4
% --> \command | \command^{#3} | \command_{#4} | \command^{#3}_{#4}
% This is a natural counterpart to \takesscripts.  The `^#3'
% (resp. `_#4') is suppressed iff `#1' (resp. `#2') is empty or a
% blank space.  That is interesting when the expression put as sup- or
% sub-script would produce an undesired blank space.

\def\putscripts#1^#2_#3^#4_#5{%
  \def\next{#2}\ifx\next\empty % no ^#2 or is a blank space
    \def\next{#3}\ifx\next\empty % neither ^#2 nor _#3
      \def\next{#1}%
    \else % _#3 only
      \def\next{#1_{#5}}%
    \fi
  \else % at least ^#2
    \def\next{#3}\ifx\next\empty % ^#2 only
      \def\next{#1^{#4}}%
    \else % ^#2_#3
      \def\next{#1^{#4}_{#5}}%
    \fi
  \fi
  % the use of \next allows #1 to take further arguments in addition to ^/_ :
  \next}



%***********************************************************************
%
%              S E L F - E X T E N D I N G   A R R O W S
%
%***********************************************************************

\newcommand{\rightarrowfill@style}[1]{$\m@th #1\smash{-}\mkern-7mu
  \cleaders\hbox{$#1\mkern -2mu\smash{-}\mkern -2mu$}\hfill
  \mkern-7mu\mathord\rightarrow$}

\newcommand{\xto}{% eXtensible \to
  \takescripts{\@utoexpanded@rrow[\mkern3mu]\rightarrow\rightarrowfill@style}}


\newcommand{\ptofill@style}[1]{$\m@th #1
  \raise.16ex\hbox{$\scriptstyle\circ$}\mkern-2.5mu  \smash{-}\mkern-7mu
  \cleaders\hbox{$#1\mkern -2mu\smash{-}\mkern -2mu$}\hfill
  \mkern-7mu\mathord\rightarrow$}

\newcommand{\xpto}{% eXtensible \pto
  \takescripts{\@utoexpanded@rrow[\mkern3mu]\pto\ptofill@style}}


\newcommand{\leftarrowfill@style}[1]{$\m@th #1\mathord\leftarrow\mkern-7mu
  \smash{-}\mkern-7mu
  \cleaders\hbox{$#1\mkern -2mu\smash{-}\mkern -2mu$}\hfill$}

\newcommand{\xfrom}{% eXtensible \leftarrow
  \takescripts{\@utoexpanded@rrow[\mkern3mu]\leftarrow\leftarrowfill@style}}


%--- Comme la semi fleche superieure a une ligne horizontale
%    de hauteur= 1/2 la hauteur de `-', il faut prolonger la
%    ligne horizontale SUR la fleche => \llap. (vielle version chars)
\newcommand{\rightharpoonupthick}{{%
    \mathrel{\mathord\rightharpoonup\llap{$\mathord-$}}}}
\newcommand{\rightharpoonupfill@style}[1]{$\m@th #1\mathord -\mkern -6mu
  \cleaders\hbox{$#1\mkern -2mu \mathord -\mkern -2mu$}\hfill
  \mkern -6mu\mathord \rightharpoonup$}

\newcommand{\xwto}{\takescripts
  {\@utoexpanded@rrow[\mkern3mu]\rightharpoonup\rightharpoonupfill@style}}



\newbox\fleche            % basic arrow
\newbox\audessus          % \audessus  = no de la boite
\newbox\endessous         % \endessous = no de la boite
\newbox\ARROW             % well dimensioned arrow
\newlength\longueur       % length of final arrow

%--- \@utoexpanded@rrow[<math skip>]<\arrow><\arrowfill>^#4_#5
%    \arrow is supposed to need to be in a math environment (e.g., $...$)
%    \arrowfill should work in text mode (as \rightarrowfill does)
%    ->  `^' (resp. `_') are supposed to have the `superscript'
%        (res.p `subscript') \catcode in order to use \takescripts
%
\def\@utoexpanded@rrow[#1]#2#3^#4_#5{\begingroup
                                        %- changes to \box'es are local
  %  \begingroup and NOT `{', because `{' would \mathord the \mathrel...
  %convergence with superscripts and subscripts: the arrow is well dimensioned
  %---------------------------------------------------------------------------
  \mathchoice{%% Display:
    \@utoexpanded@rrow@{#1}{#2}{#3}{#4}{#5}\textstyle\scriptstyle
    }{%% Text:
    \@utoexpanded@rrow@{#1}{#2}{#3}{#4}{#5}\textstyle\scriptstyle
    }{%% Script:
    \@utoexpanded@rrow@{#1}{#2}{#3}{#4}{#5}\scriptstyle\scriptscriptstyle
    }{%% Scriptscript:
    \@utoexpanded@rrow@{#1}{#2}{#3}{#4}{#5}\scriptscriptstyle
    \scriptscriptstyle}%
  \endgroup}

\newcommand{\@utoexpanded@rrow@}[7]{%
  %% #6 = textstyle, #7 = scriptstyle
  \setbox\fleche=\hbox{$#6#2$}%- natural arrow
  \setbox\audessus =\hbox{$#7\mkern7mu {#4}#1\mkern7mu$}%
  \setbox\endessous=\hbox{$#7\mkern7mu {#5}#1\mkern7mu$}%
  %%\typeout{\string\wd\string\fleche=\the\wd\fleche,
  %%       \string\wd\string\audessus=\the\wd\audessus,
  %%       \string\wd\string\endessous=\the\wd\endessous.}
  % \longueur := max of widths of { \fleche, \audessus, \endessous }
  \xarrow@maxiii{\wd\fleche}{\wd\audessus}{\wd\endessous}{\longueur}%
  %%\typeout{max = \the\longueur}
  %%\advance \longueur by 6pt  %% done in boxes \audessus \endessous
  \setbox\ARROW=\hbox to\longueur{#3{#6}}%- \arrowfill with style #6
  %% Resize all boxes to the same length with centering:
  \setbox\fleche   =\hbox to\longueur{\hfil\unhbox\fleche \hfil}%
  \setbox\audessus =\hbox to\longueur{\hfil\unhbox\audessus \hfil}%
  \setbox\endessous=\hbox to\longueur{\hfil\unhbox\endessous \hfil}%
  %% Final arrow: pack the boxes
  \setbox\ARROW=\vbox{\offinterlineskip
    \box\audessus  \vskip 0.2ex  \vtop{%
      \box\ARROW   \vskip 0.1ex  \box\endessous}}%
  %% display the arrow as a relation:
  \mathrel{\box\ARROW}%
}

%--- maximum of 3 arguments
%    #4 = max{ #1, #2, #3 }
\newcommand{\xarrow@maxiii}[4]{%
  \ifdim #1<#2  \ifdim #2<#3 #4=#3%
                \else        #4=#2\fi
  \else         \ifdim #1<#3 #4=#3%
                \else        #4=#1\fi
  \fi}

